# Ultralytics YOLO üöÄ, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 9 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  # s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  # m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  # l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  # x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# # YOLOv8.0n backbone
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, C2f, [128, True]]
#   - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
#   - [-1, 6, C2f, [256, True]]
#   - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
#   - [-1, 6, C2f, [512, True]]
#   - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
#   - [-1, 3, C2f, [1024, True]]
#   - [-1, 1, SPPF, [1024, 5]] # 9

# # YOLOv8.0n head
# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, C2f, [512]] # 12

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, C2f, [256]] # 15 (P3/8-small)

#   - [-1, 1, Conv, [256, 3, 2]]
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, C2f, [512]] # 18 (P4/16-medium)

#   - [-1, 1, Conv, [512, 3, 2]]
#   - [[-1, 9], 1, Concat, [1]] # cat head P5
#   - [-1, 3, C2f, [1024]] # 21 (P5/32-large)

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)


# # YOLOv8.0n backbone
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, Conv, [64, 3, 2]] # 0 -- 160
#   - [-1, 1, Conv, [128, 3, 2]] # 1 -- 80
#   - [-1, 1, Conv, [256, 3, 2]] # 3 -- 40
#   - [-1, 3, C2f, [256, True]] # 2 -- 40
#   - [-1, 1, Conv, [512, 3, 2]] # 4 -- 20

# # YOLOv8.0n head
# head:
#   # - [-1, 1, Conv, [128, 3, 1]] # 4 -- 20
#   # - [-1, 1, nn.Upsample, [None, 4, "nearest"]] # 5 -- 80
#   # - [[-1, 1], 1, Concat, [1]] # 6, nano -- 80 + 80 

#   - [-1, 1, Conv, [256, 3, 1]] # 5 -- 20
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 6 -- 40
#   - [[-1, 3], 1, Concat, [1]] # 7, nano -- 80 + 80 
#   - [-1, 3, C2f, [512, True]] # 2 -- 40


#   # - [-1, 1, Conv, [256, 3, 2]] # 6 -- 80
#   # - [[-1, 2], 1, Concat, [1]] # 7, small -- 80 + 80

#   # - [-1, 1, Conv, [256, 3, 2]] # 8 -- 40
#   # - [[-1, 2], 1, Concat, [1]] # 9, medium -- 40 + 40

#   - [[9], 1, Detect, [nc]] # Detect(P3, P4, P5) -- 40, 80, 160

# –¢–£–¢ –ß–¢–û –¢–û –ì–û–î–ù–û–ï
# # YOLOv8.0n backbone
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, C2f, [128, True]]
#   - [-1, 1, ADown, [256]]  # 3-P3/8
#   - [-1, 6, C2f, [256, True]]
#   - [-1, 1, ADown, [512]]  # 3-P3/8
#   - [-1, 6, C2f, [512, True]]
#   - [-1, 1, ADown, [1024]]  # 3-P3/8
#   - [-1, 3, C2f, [1024, True]]
#   - [-1, 1, SPPELAN, [1024, 1024]]  # 9

# # YOLOv8.0n head
# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, C2f, [512]] # 12

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, C2f, [256]] # 15 (P3/8-small)

#   - [-1, 1, Conv, [256, 3, 2]]
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, C2f, [512]] # 15 (P3/8-small)

#   # - [-1, 1, RepNCSPELAN4, [512, 512, 256, 1]] 

#   - [[15, 18], 1, Detect, [nc]] # Detect(P3, P4, P5)


# –¢–£–¢ –ì–û–î–ù–û–¢–ê
# # YOLOv8.0n backbone
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, C2fRepBN, [128, True]]
#   - [-1, 1, ADown, [256]]  # 3-P3/8
#   - [-1, 6, C2fRepBN, [256, True]]
#   - [-1, 1, ADown, [512]]  # 3-P3/8
#   - [-1, 6, C2fRepBN, [512, True]]
#   - [-1, 1, ADown, [1024]]  # 3-P3/8
#   - [-1, 3, C2fRepBN, [1024, True]]
#   - [-1, 1, SPPELAN, [1024, 1024]]  # 9

# # YOLOv8.0n head
# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, C2fRepBN, [512]] # 12

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, C2fRepBN, [256]] # 15 (P3/8-small)

#   - [-1, 1, Conv, [256, 3, 2]]
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, C2fRepBN, [512]] # 18 (P4/16-medium)

#   - [-1, 1, Conv, [512, 3, 2]]
#   - [[-1, 9], 1, Concat, [1]] # cat head P5
#   - [-1, 3, C2fRepBN, [1024]] # 21 (P5/32-large)

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)

##################################################################### –ü–û–ö–ê –°–ê–ú–ê–Ø –õ–£–ß–®–ê–Ø –°–ï–¢–¨

# class C2fRepBN(nn.Module):
#     """Faster Implementation of CSP Bottleneck with 2 convolutions."""

#     def __init__(self, c1, c2, n=1, shortcut=False, g=1, e=0.5):
#         """Initialize CSP bottleneck layer with two convolutions with arguments ch_in, ch_out, number, shortcut, groups,
#         expansion.
#         """
#         super().__init__()
#         self.c = int(c2 * e)  # hidden channels
#         # self.cv1 = nn.Sequential(Conv(c1, self.c, 1, 2), RepCSP(self.c, self.c, n), Conv(c1, 2 * self.c, 1, 1))
#         # self.cv1 = nn.Sequential(RepCSP(c1, c1, n), Conv(c1, 2 * self.c, 1, 1))
#         self.cv1 = nn.Sequential(RepCSP(c1, self.c * 2, n))
#         self.cv2 = nn.Sequential(Conv((2 + n) * self.c, c2, 1))  # optional act=FReLU(c2)
#         self.m = nn.ModuleList(Bottleneck(self.c, self.c, shortcut, g, k=((3, 3), (3, 3)), e=1.0) for _ in range(n))

#     def forward(self, x):
#         """Forward pass through C2f layer."""
#         y = list(self.cv1(x).chunk(2, 1))
#         y.extend(m(y[-1]) for m in self.m)
#         return self.cv2(torch.cat(y, 1))

#     def forward_split(self, x):
#         """Forward pass using split() instead of chunk()."""
#         y = list(self.cv1(x).split((self.c, self.c), 1))
#         y.extend(m(y[-1]) for m in self.m)
#         return self.cv2(torch.cat(y, 1))


# # YOLOv8.0n backbone
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, C2fRepBN, [128, True]]
#   - [-1, 1, ADown, [256]]  # 3-P3/8
#   - [-1, 3, C2fRepBN, [256, True]]
#   - [-1, 1, ADown, [512]]  # 3-P3/8
#   - [-1, 3, C2fRepBN, [512, True]]
#   - [-1, 1, ADown, [1024]]  # 3-P3/8
#   - [-1, 3, C2fRepBN, [1024, True]]
#   - [-1, 1, SPPELAN, [1024, 1024]]  # 9

# # YOLOv8.0n head
# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, C2f, [512]] # 12

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, C2f, [256]] # 15 (P3/8-small)

#   - [-1, 1, Conv, [256, 3, 2]]
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, C2f, [512]]  # 18 (P4/16-medium)

#   - [-1, 1, Conv, [512, 3, 2]]
#   - [[-1, 9], 1, Concat, [1]] # cat head P5
#   - [-1, 3, C2fRepBN, [1024]]  # 21 (P5/32-large)

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, C2fRepBN, [128, True]]
  - [-1, 1, ADown, [256]]  # 3-P3/8
  - [-1, 3, C2fRepBN, [256, True]]
  - [-1, 1, ADown, [512]]  # 3-P3/8
  - [-1, 3, C2fRepBN, [512, True]]
  - [-1, 1, ADown, [1024]]  # 3-P3/8
  - [-1, 3, C2fRepBN, [1024, True]]
  - [-1, 1, SPPELAN, [1024, 1024]]  # 9

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4
  - [-1, 3, C2f, [512]] # 12

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3
  - [-1, 3, C2f, [256]] # 15 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 12], 1, Concat, [1]] # cat head P4
  - [-1, 3, C2f, [512]]  # 18 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 9], 1, Concat, [1]] # cat head P5
  - [-1, 3, C2fRepBN, [1024]]  # 21 (P5/32-large)

  - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)
